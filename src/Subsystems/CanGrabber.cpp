// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.




#include "CanGrabber.h"
#include "../RobotMap.h"
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

CanGrabber::CanGrabber() : Subsystem("CanGrabber") {
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	topLimit = RobotMap::canGrabberTopLimit;
	bottomLimit = RobotMap::canGrabberBottomLimit;
	reel = RobotMap::canGrabberReel;
	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
}
    
void CanGrabber::InitDefaultCommand() {
	// Set the default command for a subsystem here.
	//SetDefaultCommand(new MySpecialCommand());
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}

// Put methods for controlling this subsystem
// here. Call these from Commands.

void CanGrabber::set(double speed) {
	if (isAtTop()) //at top
	{
		//only go down
		if(speed < 0) {
			go(speed);
		} else {
			go(0);
		}
	} 
	else if(isAtBottom()) //at bottom 
	{
		//only go up
		if(speed > 0) {
			go(speed);
		} else {
			go(0);
		}
	}
	else
	{
		//go anyway
		go(speed);
	}
}
//UNSAFE METHOD, DOES NOT CHECK LIMIT SWITCHES! -- DO NOT USE
void CanGrabber::go(double speed) {
	reel->Set(speed);
}
void CanGrabber::stop() {
	go(0);
}

bool CanGrabber::isAtTop() {
	return topLimit->Get();
}
bool CanGrabber::isAtBottom() {
	return false;
}

