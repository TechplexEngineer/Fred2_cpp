// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.




#include "Grabber.h"
#include "../RobotMap.h"
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

Grabber::Grabber() : Subsystem("Grabber") {
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	purpleTopLights = RobotMap::grabberPurpleTopLights;
	greenTopLight = RobotMap::grabberGreenTopLight;
	toteGripper = RobotMap::grabberToteGripper;
	pusher = RobotMap::grabberPusher;
	containerUpright = RobotMap::grabberContainerUpright;
	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
}
    
void Grabber::InitDefaultCommand() {
	// Set the default command for a subsystem here.
	//SetDefaultCommand(new MySpecialCommand());
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}


// Put methods for controlling this subsystem
// here. Call these from Commands.

void Grabber::grab(bool grab) {
	toteGripper->Set(grab);
}
void Grabber::grab() {
	grab(false);
}
void Grabber::ungrab() {
	grab(true);
}
void Grabber::push(bool push) {
	if (push) {
		pusher->Set(DoubleSolenoid::kForward);
	} else {
		pusher->Set(DoubleSolenoid::kReverse);
	}
}
void Grabber::push() {
	push(true);
}
void Grabber::unpush() {
	push(false);
}
void Grabber::topLights(bool light) {
	// if (light) {
	// 	Robot.lights.LightBar->Set(0, 15, 0);
	// 	Robot.lights.LiftLights->Set(0, 15, 0);
	// } else {
	// 	Robot.lights.LightBar->Set(15, 0, 15);
	// 	Robot.lights.LiftLights->Set(15, 0, 0);
	// }
}

void Grabber::upright(bool upright) {
	upright_out = upright;
	containerUpright->Set(upright);
}
void Grabber::upright() {
	upright(false);
}
void Grabber::uprightOut() {
	upright(true);
}
void Grabber::uprightToggle() {
	upright(! upright_out);
}

