// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.




#include "Lift.h"
#include "../RobotMap.h"
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
#include "../Commands/oi_Lift.h"
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
#include <math.h>

Lift::Lift() : Subsystem("Lift") {
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	lift = RobotMap::liftLift;
	topLimit = RobotMap::liftTopLimit;
	bottomLimit = RobotMap::liftBottomLimit;
	liftCim = RobotMap::liftLiftCim;
	liftEncoder = RobotMap::liftLiftEncoder;
	stabilizer = RobotMap::liftStabilizer;
	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
}
    
void Lift::InitDefaultCommand() {
	// Set the default command for a subsystem here.
	//SetDefaultCommand(new MySpecialCommand());
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
	SetDefaultCommand(new oi_Lift());
	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}

// Put methods for controlling this subsystem
// here. Call these from Commands.

void Lift::moveLift(double speed) {
	if(topLimit->Get()) {
		//only go down
		if(speed < 0) {
			go(speed);
			
		} else {
			go(0);
		}
	} else if(bottomLimit->Get()) {
		//only go up
		if(speed > 0) {
			go(speed);
		} else {
			go(0);
		}
	} else {
		go(speed);
	}
}
//UNSAFE METHOD, DOES NOT CHECK LIMIT SWITCHES!  -- DO NOT USE
void Lift::go(double speed) {
	if (abs(speed) < .4 && speed != 0) {
		speed = (speed/abs(speed))*.4;
	}
	liftCim->Set(speed);
}
void Lift::stop() {
	moveLift(0);
}

bool Lift::isAtTop() {
	return topLimit->Get();
}
bool Lift::isAtBottom() {
	return bottomLimit->Get();
}

double Lift::getDistance() {
	return liftEncoder->GetDistance();
}
void Lift::reset() {
	liftEncoder->Reset();
}

void Lift::rcGrab(bool pinch) {
	if (pinch) {
		stabilizer->Set(DoubleSolenoid::kForward);
	} else {
		stabilizer->Set(DoubleSolenoid::kReverse);
	}
	pinched = pinch;
}
void Lift::rcGrab() {
	rcGrab(false);
}
void Lift::rcUngrab() {
	rcGrab(true);
}

void Lift::pinchToggle() {
	rcGrab(!pinched);
}